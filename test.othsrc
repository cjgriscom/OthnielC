//TODO check for valid pipe names and method names

import{"test_methods"}
alias{"test_shiftregister:stringRegister", shiftRegister}
variable <global1:String="content">

instantiated sequence test[] <arbitraryThing:I32=0>
	
    [3]dim{I32(1)}[pizzaToppings]                               // Create a String array of 3 elements
	[pizzaToppings, 0,"pepperoni", 1,"sausage", 2,"shrooms"]set // sets indices 0-2
	[pizzaToppings]length[len] [len, " Toppings: "]PRINT        // Prints “3 Toppings: ”
	[pizzaToppings,0,1,2]index[>,>,>] [<, " ", <, " ", <]PRINT  // Prints “pepperoni sausage shrooms”
	
	["1st pass:"]PRINT ["1st message"]shiftRegister[>]PRINTLN
	["2nd pass:"]PRINT [?]shiftRegister[>]PRINTLN
	["3rd pass:"]PRINT [?]shiftRegister[>]PRINTLN
	["4th pass:"]PRINT ["4th message"]shiftRegister[>]PRINTLN
	["5th pass:"]PRINT [?]shiftRegister[>]PRINTLN
	
	[TRUE]:[someBoolean]
	[12]:[a]
	
	EXECUTE{[a]++[a]:[>] ["EXECUTE: ", <, " is the new value of a"]PRINTLN}
	EXECUTE{EXECUTE{[a]++[a] ["EXECUTE^2: ", a, " is the new value of a"]PRINTLN}}
	["Main: a=", a]PRINTLN
	
	EXECUTE{
		["Enter value for hidden var: "]PRINT
		INPUT{String}[hiddenVar]
		["234"]:[hiddenVar]
		["Value of hidden var in execute scope is: ", hiddenVar]PRINTLN
	}
	
	#PIPEEXISTS{a}[>] [<, "exists!", "does not exist."]?:[>] ["a ", <]PRINTLN
	#PIPEEXISTS{hiddenVar}[>] [<, "exists!", "does not exist."]?:[>] ["hiddenVar ", <]PRINTLN
	
	//if{ [a,11]>=[con1] [a,12]<=[con2] [con1, con2]AND[>], < }: // {optional:statements, boolean}
	//	[TRUE]:[result]
	//:elseif{someBoolean}:
	//	[FALSE]:[result]
	//:end[result]	//'if' is a compound block; anything piped out through end[] must be defined in each part of the block
	
	//[result]PRINTLN
	
	//select{ a }:
	//	case
	//:END
	
	BLOCK:
		[42]:[theAnswer]	
	:END[theAnswer]
	[theAnswer]PRINTLN
	
	[TRUE, 50]var0[^] [FALSE, ?]var0[>]PRINTLN
	[TRUE, 51]var1[^] [FALSE, 0]var1[>]PRINTLN
	[TRUE, 52]var2[^] [FALSE, 0]var2[>]PRINTLN
	[TRUE, 53]var3[^] [FALSE, 0]var3[>]PRINTLN
	[TRUE, 54]var4[^] [TRUE, 54.5]var4Double[^] [FALSE, 0]var4[out1] [FALSE, 0]var4Double[>] [out1, ", ", <]PRINTLN
	[TRUE, 55]var5[^] [FALSE, 0]var5[>]PRINTLN

	getDefault[>] ["Default: ", <]PRINTLN
	
	["Enter two booleans (0 or 1): "]PRINT
	INPUT{I8}[>]  [<, 1]=[bool1]
	INPUT{I8}[>]  [<, 1]=[bool2]
	[bool1, bool2]printBooleanOps
	
	["Enter two ints: "]PRINT
	INPUT{I32}[int1] INPUT{I32}[int2]
	[int1,int2]SWAP[int1,int2]
	[int1, "+", int2, "="]PRINT [int1, int2]+[>]PRINTLN
	[int1, "-", int2, "="]PRINT [int1, int2]-[>]PRINTLN
	[int1, "*", int2, "="]PRINT [int1, int2]*[>]PRINTLN
	[int1, "/", int2, "="]PRINT [int1, int2]/[>]PRINTLN
	[int1, "%", int2, "="]PRINT [int1, int2]%[>]PRINTLN
	[int1, "=", int2, "?  "]PRINT [int1, int2]=[>]PRINTLN
	[int1, "!=", int2, "? "]PRINT [int1, int2]!=[>]PRINTLN
	[int1, ">", int2, "?  "]PRINT [int1, int2]>[>]PRINTLN
	[int1, "<", int2, "?  "]PRINT [int1, int2]<[>]PRINTLN
	[int1, ">=", int2, "? "]PRINT [int1, int2]>=[>]PRINTLN
	[int1, "<=", int2, "? "]PRINT [int1, int2]<=[>]PRINTLN
	["Min,max of ", int1, " and ", int2, ": "]PRINT [int1,int2]MINMAX[>, >] [<, ",", <]PRINTLN
	["Min of ", int1, " and ", int2, ": "]PRINT [int1,int2]MINMAX[>, ^] [<]PRINTLN
	["Max of ", int1, " and ", int2, ": "]PRINT [int1,int2]MINMAX[^, >]PRINTLN

instantiated sequence empty{confNode1:pipe}

static sequence [write:Bool, value:I32=0]var0[glob:I32] // Should behave statically
	[write, value, glob]?:[glob]
	
inline sequence [write:Bool, value:Anything]var1[glob:typeof value] // Should not
	[write, value, glob]?:[glob]
	
instantiated sequence [write:Bool, value:Anything]var2[globB:typeof value] // Should not
	[write, value, globB]?:[globB]
	
static sequence [write:Bool, value:I32]var3[glob:I32] // Should
	[write, value]var0[glob]
	
// Should
static sequence [write:Bool, value:I32]var4[glob:I32] [write, value]var1[glob]

// Should
static sequence [write:Bool, value:Double]var4Double[glob:Double] [write, value]var1[glob]

// Should not
static sequence [write:Bool, value:I32]var5[glob:I32] [write, value]var2[glob]
	
instantiated sequence getDefault[r:I32=123] // Should NOT return null; seems good now
	
static sequence [bool1:Bool,bool2:Bool]printBooleanOps
	[bool1, bool2]XOR[>]  ["Result of XOR:  ", <]PRINTLN
	[bool1, bool2]AND[>]  ["Result of AND:  ", <]PRINTLN
	[bool1, bool2]OR[>]   ["Result of OR:   ", <]PRINTLN
	[bool1, bool2]XNOR[>] ["Result of XNOR: ", <]PRINTLN
	[bool1, bool2]NAND[>] ["Result of NAND: ", <]PRINTLN
	[bool1, bool2]NOR[>]  ["Result of NOR:  ", <]PRINTLN

instantiated sequence [a:Anything, b:typeof a]SWAP[newA:typeof a, newB:typeof a]
	[a]:[newB] [b]:[newA]

static sequence [input:String="defaultValue"]shiftRegister[result:String="emptyRegister"]
	[FALSE, ""]regHelper[result]
	[TRUE, input]regHelper[^]
	
static sequence [write:Bool, value:String]regHelper[glob:String] [write, value]var1[glob]
	
	// 